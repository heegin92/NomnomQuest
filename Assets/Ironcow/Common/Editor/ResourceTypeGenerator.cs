// ─────────────────────────────────────────────────────────────────────────────
// Part of the Synapse Framework – © 2025 Ironcow Studio
// This file is distributed under the Unity Asset Store EULA:
// https://unity.com/legal/as-terms
// ─────────────────────────────────────────────────────────────────────────────

using System.Collections.Generic;
using System.IO;
using System.Linq;

using UnityEditor;

using UnityEngine;

namespace Ironcow.Synapse.Resource
{
    public class ResourceTypeGenerator : AssetPostprocessor
    {
        private const string outputFolderPath = "Assets/Scripts/Generated";

        private static string OutputFilePath
        {
            get
            {
                var path = EditorDataSetting.ResourceTypeTargetPath;
                if (!string.IsNullOrEmpty(path))
                    return path;

                if (!Directory.Exists(outputFolderPath))
                    Directory.CreateDirectory(outputFolderPath);

                return Path.Combine(outputFolderPath, "ResourceType.cs");
            }
        }

        private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
        {
            if (FrameworkController.instance.isAddressableAsync)
                return;
            if (importedAssets.Any(IsFolderChange) || deletedAssets.Any(IsFolderChange))
            {
                GenerateResourceType();
            }
        }

        private static bool IsFolderChange(string path)
        {
            return Directory.Exists(path) && path.StartsWith("Assets");
        }

        [MenuItem("Synapse/Tool/Generate Resources Folders")]
        public static void GenerateResourceType()
        {
            var resourcesFolders = FindValidResourcesFolders();

            if (resourcesFolders.Count == 0)
            {
                Debug.LogWarning("[ResourceTypeGenerator] No valid Resources folders found in project.");
                return;
            }

            var folderMappings = new Dictionary<string, string>();

            foreach (var resourcesPath in resourcesFolders)
            {
                var subFolders = Directory.GetDirectories(resourcesPath, "*", SearchOption.AllDirectories);

                foreach (var fullPath in subFolders)
                {
                    if (IsEditorFolder(fullPath))
                        continue;

                    var folderName = Path.GetFileName(fullPath);

                    if (string.IsNullOrEmpty(folderName))
                        continue;

                    string safeName = MakeSafeName(folderName);
                    string valueString = MakeValueString(folderName);

                    if (!folderMappings.ContainsKey(safeName))
                    {
                        folderMappings.Add(safeName, valueString);
                    }
                }
            }

            WriteResourceTypeFile(folderMappings);
        }

        private static List<string> FindValidResourcesFolders()
        {
            var allFolders = Directory.GetDirectories("Assets", "*", SearchOption.AllDirectories);
            var resourcesFolders = new List<string>();

            foreach (var folder in allFolders)
            {
                var normalized = folder.Replace('\\', '/');
                if (normalized.EndsWith("/Resources") && !normalized.Contains("/Editor/"))
                {
                    resourcesFolders.Add(normalized);
                }
            }

            return resourcesFolders;
        }

        private static void WriteResourceTypeFile(Dictionary<string, string> folderMappings)
        {
            if (string.IsNullOrEmpty(EditorDataSetting.ResourceTypeTargetPath))
            {
                if (EditorUtility.DisplayDialog("Error", "Resource Type Target Path is missing.\n Please set it in the Editor Data Settings.", "OK"))
                {
                    ProjectSettingTool.Open();
                }
                return;
            }
            using (StreamWriter writer = new StreamWriter(OutputFilePath))
            {
                writer.WriteLine("// Auto-generated by ResourceTypeGenerator");
                writer.WriteLine("public static partial class ResourceType");
                writer.WriteLine("{");

                foreach (var kvp in folderMappings.OrderBy(x => x.Key))
                {
                    writer.WriteLine($"    public const string {kvp.Key} = \"{kvp.Value}\";");
                }

                if (!folderMappings.ContainsKey("Prefabs"))
                {
                    writer.WriteLine("public const string Prefabs = \"Prefabs\";");
                }
                if (!folderMappings.ContainsKey("Datas"))
                {
                    writer.WriteLine("public const string Datas = \"Datas\";");
                }
                if (!folderMappings.ContainsKey("Scene"))
                {
                    writer.WriteLine("public const string Scene = \"Scene\";");
                }
                if (!folderMappings.ContainsKey("UI"))
                {
                    writer.WriteLine("public const string UI = \"UI\";");
                }
                if (!folderMappings.ContainsKey("Audios"))
                {
                    writer.WriteLine("public const string Audios = \"Audios\";");
                }
                if (!folderMappings.ContainsKey("Thumbnail"))
                {
                    writer.WriteLine("public const string Thumbnail = \"Thumbnail\";");
                }

                writer.WriteLine("}");
            }

            AssetDatabase.Refresh();
            Debug.Log($"[ResourceTypeGenerator] ResourceType.cs regenerated with {folderMappings.Count} entries.");
        }

        private static bool IsEditorFolder(string fullPath)
        {
            string relativePath = fullPath.Replace('\\', '/');
            return relativePath.Contains("/Editor") || relativePath.Contains("/Editor/");
        }

        private static string MakeSafeName(string folderName)
        {
            // 변수명 만들기: 영문자, 숫자만 남김
            string safe = new string(folderName
                .Where(c => char.IsLetterOrDigit(c))
                .ToArray());

            if (!string.IsNullOrEmpty(safe) && char.IsDigit(safe[0]))
            {
                safe = "_" + safe;
            }

            return safe;
        }

        private static string MakeValueString(string folderName)
        {
            // 스트링 값 만들기: 언더스코어(_)를 공백으로 변경
            return folderName.Replace("_", " ");
        }
    }
}
